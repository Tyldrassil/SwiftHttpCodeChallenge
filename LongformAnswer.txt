Planning for failure


First i feel it is important to lay out how i think the process works from client to payment api

Front end					Back end				Payment Processing

User hits submit -->
						backend messages API -->
												API processes payment
											<-- API Responds
						backend creates order in DB
					<-- backend notifies to FE
UI Updates for User


Unhappy customer 1

For this customer something seems to be happening to the last step of the above process. There is no notification being displayed to the user regarding the order. This could be for instance due to the Front end timing out before the backend has a chance to send a message back to the front end

This could be solved by creating a message for the user about processing taking some extra time, or more messages coming back from the backend regarding the status of the entire process. 


Unhappy customer 2

This scenario seems to have something going wrong with the third step of the process, where the backend may have timed out, and then attempted to send the data to the payment API again, leading to a double charge. This could be due to error codes from the payment process not being good enough, possibly a 202 accepted was not handled properly.

This could be solved by changing the behaviour of the backend in regards to slow behaviour from the payment processing. Instead of attempting again, it would take the safer route and time out, or request an update from the payment process on if it received the payment information or not.


Unhappy customer 3

This customer could be in the same scenario as the first customer. This could be happening due to the user attempting to submit twice for the same item, creating two parallel runs of the process above. This leading to two payments, while only one copy of the order has been submitted to the Database.

A solution for this could be to stop the submit button from activating after hitting it the first time, but before getting a response from the backend again. 

A check could also be made on the back end side to make sure the same user cannot make the same order before getting a response from the payment API beforehand.


In the end, some of these problems could be solved by doing more error checking, and letting the customer know some of what is going on in terms of what is being waited on. Maybe some sort of notification letting the customer know the payment API is very busy that day.
